# main.py
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import os
import logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
load_dotenv()

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from transport import get_provider
from services.bot_logic import process_message_with_context
from services.state import (
    save_message,
    get_chat,
    upsert_chat,
    open_ticket,
    close_ticket,
)

# -------------------- –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------

app = Flask(__name__)
provider = get_provider()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ stdout (–≤–∏–¥–Ω–æ –≤ Render ‚Üí Logs)
logging.basicConfig(level=logging.INFO)
log = app.logger

# --- helper: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏ ---
def chunk_and_send(send_fn, to: str, body: str, chunk_size: int = 1200):
    """
    –†–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã WhatsApp —á–µ—Ä–µ–∑ Twilio –Ω–µ –æ–±—Ä–µ–∑–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
    send_fn: —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (provider.send_message)
    to: chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+9945...@c.us')
    body: –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    chunk_size: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (1200‚Äì1400)
    """
    if not body:
        return True

    parts = []
    current = []
    count = 0

    # —Ä–µ–∂–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    for line in body.splitlines():
        # +1 –Ω–∞ —É—á—ë—Ç '\n'
        if count + len(line) + 1 > chunk_size and current:
            parts.append("\n".join(current))
            current = [line]
            count = len(line) + 1
        else:
            current.append(line)
            count += len(line) + 1

    if current:
        parts.append("\n".join(current))

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    total = len(parts)
    ok_all = True
    for idx, part in enumerate(parts, 1):
        prefix = f"({idx}/{total})\n" if total > 1 else ""
        ok = send_fn(to, prefix + part)
        ok_all = ok_all and bool(ok)
    return ok_all


# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------------------

def detect_lang(text: str) -> str:
    """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ (AZ/RU). –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π."""
    t = (text or "").lower()
    if any(w in t for w in ["salam", "nec…ôs…ôn", "xahi≈ü", "b…ôli", "n…ô", "t…ô≈ü…ôkk√ºr"]):
        return "az"
    if any(w in t for w in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–≤–∞–¥—å–±–∞", "–Ω—É–∂–Ω–æ", "—Å–ø–∞—Å–∏–±–æ"]):
        return "ru"
    return "az"

#ESCALATE_KEYWORDS = {"operator", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—á–µ–ª–æ–≤–µ–∫", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"}
ESCALATE_KEYWORDS = {"operator", "–æ–ø–µ—Ä–∞—Ç–æ—Ä"}

# -------------------- –†–æ—É—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ --------------------

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok"}), 200

@app.route("/webhook", methods=["POST"])
def webhook():
    """–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: Twilio (form-urlencoded) –∏ Green-API (JSON)."""
    try:
        # Twilio –ø—Ä–∏—Å—ã–ª–∞–µ—Ç form; Green ‚Äî JSON. –ë–µ—Ä—ë–º form –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.
        form = request.form.to_dict() if request.form else {}
        data = form or request.get_json(force=True, silent=True) or {}
        log.info("RAW IN: %s", data)

        message = provider.parse_incoming(data)
        log.info("PARSED: %s", message)

        if not message:
            return jsonify({"status": "ok"})

        chat_id = message["chat_id"]
        text = message.get("text", "")

        # —è–∑—ã–∫ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
        lang = detect_lang(text)
        upsert_chat(chat_id, lang=lang)

        # —É–∂–µ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ –ø–∏—à–µ–º –≤—Ö–æ–¥—è—â–µ–µ
        chat_meta = get_chat(chat_id) or {}
        if chat_meta.get("state") == "ESCALATED":
            save_message(chat_id, "user", text)
            return jsonify({"status": "ok"})

        # –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        if any(k in (text or "").lower() for k in ESCALATE_KEYWORDS):
            open_ticket(chat_id, reason="keyword")
            #provider.send_message(chat_id, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –û–Ω —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç üôè")
            chunk_and_send(provider.send_message, chat_id, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –û–Ω —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç üôè")
            return jsonify({"status": "ok"})

        # –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å—Ç–æ—Ä–∏—è ‚Üí GPT ‚Üí –æ—Ç–≤–µ—Ç
        save_message(chat_id, "user", text)
        reply = process_message_with_context(chat_id, text, lang=lang)
        log.info("REPLY: %s", reply)
        save_message(chat_id, "assistant", reply)

        #ok = provider.send_message(chat_id, reply)
        ok = chunk_and_send(provider.send_message, chat_id, reply, chunk_size=1200)
        log.info("SEND RESULT: %s", ok)

        return jsonify({"status": "ok"})
    except Exception as e:
        log.exception("WEBHOOK ERROR")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.post("/operator/reply")
def operator_reply():
    """
    –†—É—á–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É.
    –¢—Ä–µ–±—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Operator-Secret = OPERATOR_SECRET –∏–∑ ENV.
    Body JSON: {"chatId":"<id@c.us>", "text":"...", "close": false}
    """
    secret = os.environ.get("OPERATOR_SECRET")
    if secret and request.headers.get("X-Operator-Secret") != secret:
        return jsonify({"error": "forbidden"}), 403

    data = request.get_json(force=True, silent=False)
    chat_id = data["chatId"]
    text = data["text"]
    close = bool(data.get("close", False))

    save_message(chat_id, "operator", text)
    #provider.send_message(chat_id, text)
    chunk_and_send(provider.send_message, chat_id, text)

    if close:
        close_ticket(chat_id, note="operator closed")
        #provider.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏—Ç–µ.")
        chunk_and_send(provider.send_message, chat_id, "–°–ø–∞—Å–∏–±–æ! –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏—Ç–µ.")

    return jsonify({"ok": True})

# -------------------- –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ --------------------

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: python main.py
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
